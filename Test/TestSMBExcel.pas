unit TestSMBExcel;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SMBExcel, System.Variants, Excel_TLB;

const
  FileNamePattern1 = 'C:\Users\1\Google Диск\RAD Studio Projects\SMBComponents\SMBReport\Patterns\pattern1.xlsx';
type
  // Test methods for class TSMBReport

  TestTSMBExcel = class(TTestCase)
  strict private
    FSMBExcel: TSMBExcel;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure ClassOpenWorkbook;
    procedure ClassCreateExcelObj;
    procedure ClassFreeExcelObj;
    procedure ClassCheckExcelInstall;
    procedure ClassShow;
    procedure ClassHide;
    procedure ClassReadCellA1;

    procedure CreateExcelAndOpenWorkbookPattern1;
    procedure GetWorksheetList1;
  end;

implementation
uses
  Vcl.Dialogs;

procedure TestTSMBExcel.ClassCheckExcelInstall;
begin
  CheckTrue(FSMBExcel.CheckExcelInstall);
end;

procedure TestTSMBExcel.ClassCreateExcelObj;
var
  FExcel: ExcelApplication;
begin
  FExcel := FSMBExcel.CreateExcelObject(True);
  CheckTrue(Assigned(FExcel));
  FSMBExcel.FreeExcelObject(FExcel);
end;

procedure TestTSMBExcel.ClassFreeExcelObj;
var
  FExcel: ExcelApplication;
begin
  FExcel := FSMBExcel.CreateExcelObject();
  CheckTrue(FSMBExcel.FreeExcelObject(FExcel));
  CheckFalse(Assigned(FExcel));
end;

procedure TestTSMBExcel.ClassHide;
var
  FExcel: ExcelApplication;
  WB: ExcelWorkbook;
begin
  FExcel    := TSMBExcel.CreateExcelObject();
  WB        := TSMBExcel.OpenWorkbook(FExcel, FileNamePattern1);
  TSMBExcel.Show(FExcel);
//  ShowMessage('Before Hide');
  TSMBExcel.Hide(FExcel);
//  ShowMessage('After Hide');
  TSMBExcel.FreeExcelObject(FExcel);
end;

procedure TestTSMBExcel.SetUp;
begin
end;

procedure TestTSMBExcel.ClassShow;
var
  FExcel: ExcelApplication;
  WB: ExcelWorkbook;
begin
  FExcel    := TSMBExcel.CreateExcelObject();
  WB        := TSMBExcel.OpenWorkbook(FExcel, FileNamePattern1);
  TSMBExcel.Show(FExcel);
//  ShowMessage('Test');
  TSMBExcel.FreeExcelObject(FExcel);
end;

procedure TestTSMBExcel.CreateExcelAndOpenWorkbookPattern1;
var
  E: TSMBExcel;
begin
  E := TSMBExcel.Create(FileNamePattern1);
  CheckNotNull(E);
  E.Free;
end;

procedure TestTSMBExcel.GetWorksheetList1;
var
  E: TSMBExcel;
begin
  E := TSMBExcel.Create(FileNamePattern1);
  CheckNotNull(E.Worksheet['Лист1']);
  E.Free;
end;

procedure TestTSMBExcel.TearDown;
begin
end;

procedure TestTSMBExcel.ClassOpenWorkbook;
var
  FExcel: ExcelApplication;
begin
  FExcel := TSMBExcel.CreateExcelObject();
  CheckNotNull(TSMBExcel.OpenWorkbook(FExcel, FileNamePattern1));
  TSMBExcel.FreeExcelObject(FExcel);
end;

procedure TestTSMBExcel.ClassReadCellA1;
var
  FExcel: ExcelApplication;
  WB: ExcelWorkbook;
begin
  FExcel    := TSMBExcel.CreateExcelObject();
  WB        := TSMBExcel.OpenWorkbook(FExcel, FileNamePattern1);
  CheckEquals('Text in cell A1', FExcel.Cells.Item[1, 1]);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSMBExcel.Suite);
end.

